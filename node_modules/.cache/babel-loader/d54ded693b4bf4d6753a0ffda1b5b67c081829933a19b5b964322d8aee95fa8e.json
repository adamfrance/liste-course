{"ast":null,"code":"var _jsxFileName = \"/Users/adam/Desktop/reactjs/React/liste-course/src/contexts/ListsContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer, useCallback } from 'react';\nimport useDataFetching from '../hooks/useDataFetching';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListsContext = /*#__PURE__*/createContext();\n\n// 1 - definir un etat initial\nconst initialState = {\n  lists: [],\n  list: {},\n  loading: false,\n  error: ''\n};\n\n// 2 - definir des actions\n// charger les listes ==> CHARGEMENT_LISTES ==> remplir tableau listes\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'GET_LISTS_SUCCESS':\n      return {\n        ...state,\n        lists: action.payload,\n        loading: true\n      };\n    case 'GET_LISTS_ERROR':\n      return {\n        ...state,\n        lists: [],\n        loading: false,\n        error: action.payload\n      };\n    case 'GET_LIST_SUCCESS':\n      return {\n        ...state,\n        list: action.payload,\n        loading: true\n      };\n    case 'GET_LIST_ERROR':\n      return {\n        ...state,\n        list: {},\n        loading: false,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const ListsContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const fetchLists = useCallback(async () => {\n    try {\n      const data = await fetch(`http://localhost:8000/lists`);\n      const result = await data.json();\n      if (result) {\n        dispatch({\n          type: 'GET_LISTS_SUCCESS',\n          payload: result\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: 'GET_LISTS_ERROR',\n        payload: error.message\n      });\n    }\n  }, []);\n  const fetchList = useCallback(async listId => {\n    try {\n      const data = await fetch(`http://localhost:8000/lists/${listId}/items`);\n      const result = await data.json();\n      if (result) {\n        dispatch({\n          type: 'GET_LIST_SUCCESS',\n          payload: result\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: 'GET_LIST_ERROR',\n        payload: error.message\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ListsContext.Provider, {\n    value: {\n      ...state,\n      fetchLists,\n      fetchList\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n_s(ListsContextProvider, \"cw2xwzwEV9F1OFaoCjVD5P4GILU=\");\n_c = ListsContextProvider;\nexport default ListsContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ListsContextProvider\");","map":{"version":3,"names":["createContext","useReducer","useCallback","useDataFetching","ListsContext","initialState","lists","list","loading","error","reducer","state","action","type","payload","ListsContextProvider","children","dispatch","fetchLists","data","fetch","result","json","message","fetchList","listId"],"sources":["/Users/adam/Desktop/reactjs/React/liste-course/src/contexts/ListsContext.js"],"sourcesContent":["import { createContext, useReducer, useCallback } from 'react'\nimport useDataFetching from '../hooks/useDataFetching'\n\n\nexport const ListsContext = createContext()\n\n// 1 - definir un etat initial\nconst initialState = {\n    lists: [],\n    list: {},\n    loading: false,\n    error: ''\n}\n\n// 2 - definir des actions\n// charger les listes ==> CHARGEMENT_LISTES ==> remplir tableau listes\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'GET_LISTS_SUCCESS':\n            return {\n                ...state,\n                lists: action.payload,\n                loading: true\n            };\n        case 'GET_LISTS_ERROR':\n            return {\n                ...state,\n                lists: [],\n                loading: false,\n                error: action.payload\n            };\n        case 'GET_LIST_SUCCESS':\n            return {\n                ...state,\n                list: action.payload,\n                loading: true\n            };\n        case 'GET_LIST_ERROR':\n            return {\n                ...state,\n                list: {},\n                loading: false,\n                error: action.payload\n            };\n        default:\n            return state\n    }\n}\n\nexport const ListsContextProvider = ({ children }) => {\n\n    const [state, dispatch] = useReducer(reducer, initialState)\n\n    const fetchLists = useCallback(\n        async () => {\n            try {\n                const data = await fetch(`http://localhost:8000/lists`);\n                const result = await data.json();\n\n                if (result) {\n                    dispatch({ type: 'GET_LISTS_SUCCESS', payload: result })\n                }\n            } catch (error) {\n                dispatch({ type: 'GET_LISTS_ERROR', payload: error.message })\n            }\n        }, []\n    )\n\n    const fetchList = useCallback(\n        async (listId) => {\n            try {\n                const data = await fetch(`http://localhost:8000/lists/${listId}/items`);\n                const result = await data.json();\n\n                if (result) {\n                    dispatch({ type: 'GET_LIST_SUCCESS', payload: result })\n                }\n            } catch (error) {\n                dispatch({ type: 'GET_LIST_ERROR', payload: error.message })\n            }\n        }, []\n    )\n\n    return (\n\n        <ListsContext.Provider value={{ ...state, fetchLists, fetchList }}>{children}</ListsContext.Provider>\n    )\n}\n\nexport default ListsContextProvider"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,WAAW,QAAQ,OAAO;AAC9D,OAAOC,eAAe,MAAM,0BAA0B;AAAA;AAGtD,OAAO,MAAMC,YAAY,gBAAGJ,aAAa,EAAE;;AAE3C;AACA,MAAMK,YAAY,GAAG;EACjBC,KAAK,EAAE,EAAE;EACTC,IAAI,EAAE,CAAC,CAAC;EACRC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACX,CAAC;;AAED;AACA;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;EAC/B,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,mBAAmB;MACpB,OAAO;QACH,GAAGF,KAAK;QACRL,KAAK,EAAEM,MAAM,CAACE,OAAO;QACrBN,OAAO,EAAE;MACb,CAAC;IACL,KAAK,iBAAiB;MAClB,OAAO;QACH,GAAGG,KAAK;QACRL,KAAK,EAAE,EAAE;QACTE,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEG,MAAM,CAACE;MAClB,CAAC;IACL,KAAK,kBAAkB;MACnB,OAAO;QACH,GAAGH,KAAK;QACRJ,IAAI,EAAEK,MAAM,CAACE,OAAO;QACpBN,OAAO,EAAE;MACb,CAAC;IACL,KAAK,gBAAgB;MACjB,OAAO;QACH,GAAGG,KAAK;QACRJ,IAAI,EAAE,CAAC,CAAC;QACRC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEG,MAAM,CAACE;MAClB,CAAC;IACL;MACI,OAAOH,KAAK;EAAA;AAExB,CAAC;AAED,OAAO,MAAMI,oBAAoB,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EAE7C,MAAM,CAACL,KAAK,EAAEM,QAAQ,CAAC,GAAGhB,UAAU,CAACS,OAAO,EAAEL,YAAY,CAAC;EAE3D,MAAMa,UAAU,GAAGhB,WAAW,CAC1B,YAAY;IACR,IAAI;MACA,MAAMiB,IAAI,GAAG,MAAMC,KAAK,CAAE,6BAA4B,CAAC;MACvD,MAAMC,MAAM,GAAG,MAAMF,IAAI,CAACG,IAAI,EAAE;MAEhC,IAAID,MAAM,EAAE;QACRJ,QAAQ,CAAC;UAAEJ,IAAI,EAAE,mBAAmB;UAAEC,OAAO,EAAEO;QAAO,CAAC,CAAC;MAC5D;IACJ,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACZQ,QAAQ,CAAC;QAAEJ,IAAI,EAAE,iBAAiB;QAAEC,OAAO,EAAEL,KAAK,CAACc;MAAQ,CAAC,CAAC;IACjE;EACJ,CAAC,EAAE,EAAE,CACR;EAED,MAAMC,SAAS,GAAGtB,WAAW,CACzB,MAAOuB,MAAM,IAAK;IACd,IAAI;MACA,MAAMN,IAAI,GAAG,MAAMC,KAAK,CAAE,+BAA8BK,MAAO,QAAO,CAAC;MACvE,MAAMJ,MAAM,GAAG,MAAMF,IAAI,CAACG,IAAI,EAAE;MAEhC,IAAID,MAAM,EAAE;QACRJ,QAAQ,CAAC;UAAEJ,IAAI,EAAE,kBAAkB;UAAEC,OAAO,EAAEO;QAAO,CAAC,CAAC;MAC3D;IACJ,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACZQ,QAAQ,CAAC;QAAEJ,IAAI,EAAE,gBAAgB;QAAEC,OAAO,EAAEL,KAAK,CAACc;MAAQ,CAAC,CAAC;IAChE;EACJ,CAAC,EAAE,EAAE,CACR;EAED,oBAEI,QAAC,YAAY,CAAC,QAAQ;IAAC,KAAK,EAAE;MAAE,GAAGZ,KAAK;MAAEO,UAAU;MAAEM;IAAU,CAAE;IAAA,UAAER;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAyB;AAE7G,CAAC;AAAA,GAtCYD,oBAAoB;AAAA,KAApBA,oBAAoB;AAwCjC,eAAeA,oBAAoB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}