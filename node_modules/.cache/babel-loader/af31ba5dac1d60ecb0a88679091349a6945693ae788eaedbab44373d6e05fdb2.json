{"ast":null,"code":"var _jsxFileName = \"/Users/adam/Desktop/reactjs/React/liste-course/src/contexts/ListsContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer, useCallback } from 'react';\nimport useDataFetching from '../hooks/useDataFetching';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListsContext = /*#__PURE__*/createContext();\n\n// 1 - definir un etat initial\nconst initialState = {\n  lists: [],\n  loading: true,\n  error: ''\n};\n\n// 2 - definir des actions\n// charger les listes ==> CHARGEMENT_LISTES ==> remplir tableau listes\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'GET_LISTS_SUCCESS':\n      return {\n        ...state,\n        lists: action.payload,\n        loading: false\n      };\n    case 'GET_LISTS_ERROR':\n      return {\n        ...state,\n        lists: [],\n        loading: false,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const ListsContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return /*#__PURE__*/_jsxDEV(ListsContext.Provider, {\n    value: {\n      lists: data,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(ListsContextProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = ListsContextProvider;\nexport default ListsContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ListsContextProvider\");","map":{"version":3,"names":["createContext","useReducer","useCallback","useDataFetching","ListsContext","initialState","lists","loading","error","reducer","state","action","type","payload","ListsContextProvider","children","dispatch","data"],"sources":["/Users/adam/Desktop/reactjs/React/liste-course/src/contexts/ListsContext.js"],"sourcesContent":["import { createContext, useReducer, useCallback } from 'react'\nimport useDataFetching from '../hooks/useDataFetching'\n\n\nexport const ListsContext = createContext()\n\n// 1 - definir un etat initial\nconst initialState = {\n    lists: [],\n    loading: true,\n    error: ''\n}\n\n// 2 - definir des actions\n// charger les listes ==> CHARGEMENT_LISTES ==> remplir tableau listes\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'GET_LISTS_SUCCESS':\n            return {\n                ...state,\n                lists: action.payload,\n                loading: false\n            };\n        case 'GET_LISTS_ERROR':\n            return {\n                ...state,\n                lists: [],\n                loading: false,\n                error: action.payload\n            };\n        default:\n            return state\n    }\n}\n\nexport const ListsContextProvider = ({ children }) => {\n\n    const [state, dispatch] = useReducer(reducer, initialState)\n\n\n\n    return (\n\n        <ListsContext.Provider value={{lists: data, loading, error}}>{children}</ListsContext.Provider>\n    )\n}\n\nexport default ListsContextProvider"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,WAAW,QAAQ,OAAO;AAC9D,OAAOC,eAAe,MAAM,0BAA0B;AAAA;AAGtD,OAAO,MAAMC,YAAY,gBAAGJ,aAAa,EAAE;;AAE3C;AACA,MAAMK,YAAY,GAAG;EACjBC,KAAK,EAAE,EAAE;EACTC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE;AACX,CAAC;;AAED;AACA;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;EAC/B,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,mBAAmB;MACpB,OAAO;QACH,GAAGF,KAAK;QACRJ,KAAK,EAAEK,MAAM,CAACE,OAAO;QACrBN,OAAO,EAAE;MACb,CAAC;IACL,KAAK,iBAAiB;MAClB,OAAO;QACH,GAAGG,KAAK;QACRJ,KAAK,EAAE,EAAE;QACTC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEG,MAAM,CAACE;MAClB,CAAC;IACL;MACI,OAAOH,KAAK;EAAA;AAExB,CAAC;AAED,OAAO,MAAMI,oBAAoB,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EAE7C,MAAM,CAACL,KAAK,EAAEM,QAAQ,CAAC,GAAGf,UAAU,CAACQ,OAAO,EAAEJ,YAAY,CAAC;EAI3D,oBAEI,QAAC,YAAY,CAAC,QAAQ;IAAC,KAAK,EAAE;MAACC,KAAK,EAAEW,IAAI;MAAEV,OAAO;MAAEC;IAAK,CAAE;IAAA,UAAEO;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAyB;AAEvG,CAAC;AAAA,GAVYD,oBAAoB;AAAA,KAApBA,oBAAoB;AAYjC,eAAeA,oBAAoB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}