{"ast":null,"code":"var _jsxFileName = \"/Users/adam/Desktop/reactjs/React/liste-course/src/contexts/ItemsContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useCallback, useState } from 'react';\nimport useDataFetching from '../hooks/useDataFetching';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ItemsContext = /*#__PURE__*/createContext();\nexport const ItemsContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  // const [loading, error, data] = useDataFetching('http://localhost:8000/items');\n\n  const [loading, setLoading] = useState(false);\n  const [items, setItems] = useState([]);\n  const [error, setError] = useState(\"\");\n  const fetchItems = useCallback(async listId => {\n    try {\n      const data = await fetch(`http://localhost:8000/lists/${listId}/items`);\n      const result = await data.json();\n      if (result) {\n        setItems(result);\n        setLoading(true);\n      }\n    } catch (error) {\n      setLoading(false);\n      setError(error.message);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ItemsContext.Provider, {\n    value: {\n      items,\n      loading,\n      error,\n      fetchItems\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(ItemsContextProvider, \"wepYdADZHuJUnaJKQWgm7XsNLtM=\");\n_c = ItemsContextProvider;\nexport default ItemsContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ItemsContextProvider\");","map":{"version":3,"names":["createContext","useCallback","useState","useDataFetching","ItemsContext","ItemsContextProvider","children","loading","setLoading","items","setItems","error","setError","fetchItems","listId","data","fetch","result","json","message"],"sources":["/Users/adam/Desktop/reactjs/React/liste-course/src/contexts/ItemsContext.js"],"sourcesContent":["import { createContext, useCallback, useState } from 'react'\nimport useDataFetching from '../hooks/useDataFetching'\n\n\nexport const ItemsContext = createContext()\n\nexport const ItemsContextProvider = ({ children }) => {\n    // const [loading, error, data] = useDataFetching('http://localhost:8000/items');\n\n    const [loading, setLoading] = useState(false);\n    const [items, setItems] = useState([]);\n    const [error, setError] = useState(\"\");\n\n\n    const fetchItems = useCallback(\n        async (listId) => {\n            try {\n                const data = await fetch(`http://localhost:8000/lists/${listId}/items`);\n                const result = await data.json();\n\n                if (result) {\n                    setItems(result);\n                    setLoading(true);\n                }\n            } catch (error) {\n                setLoading(false);\n                setError(error.message);\n            }\n        }, []\n    )\n\n    return (\n\n        <ItemsContext.Provider value={{items, loading, error, fetchItems}}>{children}</ItemsContext.Provider>\n    )\n}\n\nexport default ItemsContextProvider"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAC5D,OAAOC,eAAe,MAAM,0BAA0B;AAAA;AAGtD,OAAO,MAAMC,YAAY,gBAAGJ,aAAa,EAAE;AAE3C,OAAO,MAAMK,oBAAoB,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EAC7C;;EAEA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAGtC,MAAMW,UAAU,GAAGZ,WAAW,CAC1B,MAAOa,MAAM,IAAK;IACd,IAAI;MACA,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAAE,+BAA8BF,MAAO,QAAO,CAAC;MACvE,MAAMG,MAAM,GAAG,MAAMF,IAAI,CAACG,IAAI,EAAE;MAEhC,IAAID,MAAM,EAAE;QACRP,QAAQ,CAACO,MAAM,CAAC;QAChBT,UAAU,CAAC,IAAI,CAAC;MACpB;IACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZH,UAAU,CAAC,KAAK,CAAC;MACjBI,QAAQ,CAACD,KAAK,CAACQ,OAAO,CAAC;IAC3B;EACJ,CAAC,EAAE,EAAE,CACR;EAED,oBAEI,QAAC,YAAY,CAAC,QAAQ;IAAC,KAAK,EAAE;MAACV,KAAK;MAAEF,OAAO;MAAEI,KAAK;MAAEE;IAAU,CAAE;IAAA,UAAEP;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAyB;AAE7G,CAAC;AAAA,GA7BYD,oBAAoB;AAAA,KAApBA,oBAAoB;AA+BjC,eAAeA,oBAAoB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}