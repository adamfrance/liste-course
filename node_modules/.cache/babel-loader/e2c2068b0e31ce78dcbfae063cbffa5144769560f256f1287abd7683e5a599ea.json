{"ast":null,"code":"var _jsxFileName = \"/Users/adam/Desktop/reactjs/React/liste-course/src/contexts/ListsContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer, useCallback } from 'react';\nimport useDataFetching from '../hooks/useDataFetching';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListsContext = /*#__PURE__*/createContext();\n\n// 1 - definir un etat initial\nconst initialState = {\n  lists: [],\n  loading: false,\n  error: ''\n};\n\n// 2 - definir des actions\n// charger les listes ==> CHARGEMENT_LISTES ==> remplir tableau listes\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'GET_LISTS_SUCCESS':\n      return {\n        ...state,\n        lists: action.payload,\n        loading: true\n      };\n    case 'GET_LISTS_ERROR':\n      return {\n        ...state,\n        lists: [],\n        loading: false,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const ListsContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const fetchItems = useCallback(async listId => {\n    try {\n      const data = await fetch(`http://localhost:8000/lists`);\n      const result = await data.json();\n      if (result) {\n        dispatch({\n          type: 'GET_LISTS_SUCCESS',\n          payload: result\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: 'GET_LISTS_ERROR',\n        payload: error.message\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ListsContext.Provider, {\n    value: {\n      lists: data,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(ListsContextProvider, \"T+rq8e/aYz0KSn5t5mzC+CzdTXQ=\");\n_c = ListsContextProvider;\nexport default ListsContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ListsContextProvider\");","map":{"version":3,"names":["createContext","useReducer","useCallback","useDataFetching","ListsContext","initialState","lists","loading","error","reducer","state","action","type","payload","ListsContextProvider","children","dispatch","fetchItems","listId","data","fetch","result","json","message"],"sources":["/Users/adam/Desktop/reactjs/React/liste-course/src/contexts/ListsContext.js"],"sourcesContent":["import { createContext, useReducer, useCallback } from 'react'\nimport useDataFetching from '../hooks/useDataFetching'\n\n\nexport const ListsContext = createContext()\n\n// 1 - definir un etat initial\nconst initialState = {\n    lists: [],\n    loading: false,\n    error: ''\n}\n\n// 2 - definir des actions\n// charger les listes ==> CHARGEMENT_LISTES ==> remplir tableau listes\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'GET_LISTS_SUCCESS':\n            return {\n                ...state,\n                lists: action.payload,\n                loading: true\n            };\n        case 'GET_LISTS_ERROR':\n            return {\n                ...state,\n                lists: [],\n                loading: false,\n                error: action.payload\n            };\n        default:\n            return state\n    }\n}\n\nexport const ListsContextProvider = ({ children }) => {\n\n    const [state, dispatch] = useReducer(reducer, initialState)\n\n    const fetchItems = useCallback(\n        async (listId) => {\n            try {\n                const data = await fetch(`http://localhost:8000/lists`);\n                const result = await data.json();\n\n                if (result) {\n                    dispatch({ type: 'GET_LISTS_SUCCESS', payload: result })\n                }\n            } catch (error) {\n                dispatch({ type: 'GET_LISTS_ERROR', payload: error.message })\n            }\n        }, []\n    )\n\n    return (\n\n        <ListsContext.Provider value={{lists: data, loading, error}}>{children}</ListsContext.Provider>\n    )\n}\n\nexport default ListsContextProvider"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,WAAW,QAAQ,OAAO;AAC9D,OAAOC,eAAe,MAAM,0BAA0B;AAAA;AAGtD,OAAO,MAAMC,YAAY,gBAAGJ,aAAa,EAAE;;AAE3C;AACA,MAAMK,YAAY,GAAG;EACjBC,KAAK,EAAE,EAAE;EACTC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACX,CAAC;;AAED;AACA;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;EAC/B,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,mBAAmB;MACpB,OAAO;QACH,GAAGF,KAAK;QACRJ,KAAK,EAAEK,MAAM,CAACE,OAAO;QACrBN,OAAO,EAAE;MACb,CAAC;IACL,KAAK,iBAAiB;MAClB,OAAO;QACH,GAAGG,KAAK;QACRJ,KAAK,EAAE,EAAE;QACTC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEG,MAAM,CAACE;MAClB,CAAC;IACL;MACI,OAAOH,KAAK;EAAA;AAExB,CAAC;AAED,OAAO,MAAMI,oBAAoB,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EAE7C,MAAM,CAACL,KAAK,EAAEM,QAAQ,CAAC,GAAGf,UAAU,CAACQ,OAAO,EAAEJ,YAAY,CAAC;EAE3D,MAAMY,UAAU,GAAGf,WAAW,CAC1B,MAAOgB,MAAM,IAAK;IACd,IAAI;MACA,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAAE,6BAA4B,CAAC;MACvD,MAAMC,MAAM,GAAG,MAAMF,IAAI,CAACG,IAAI,EAAE;MAEhC,IAAID,MAAM,EAAE;QACRL,QAAQ,CAAC;UAAEJ,IAAI,EAAE,mBAAmB;UAAEC,OAAO,EAAEQ;QAAO,CAAC,CAAC;MAC5D;IACJ,CAAC,CAAC,OAAOb,KAAK,EAAE;MACZQ,QAAQ,CAAC;QAAEJ,IAAI,EAAE,iBAAiB;QAAEC,OAAO,EAAEL,KAAK,CAACe;MAAQ,CAAC,CAAC;IACjE;EACJ,CAAC,EAAE,EAAE,CACR;EAED,oBAEI,QAAC,YAAY,CAAC,QAAQ;IAAC,KAAK,EAAE;MAACjB,KAAK,EAAEa,IAAI;MAAEZ,OAAO;MAAEC;IAAK,CAAE;IAAA,UAAEO;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAyB;AAEvG,CAAC;AAAA,GAvBYD,oBAAoB;AAAA,KAApBA,oBAAoB;AAyBjC,eAAeA,oBAAoB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}